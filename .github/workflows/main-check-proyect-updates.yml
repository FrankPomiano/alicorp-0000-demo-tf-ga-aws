name: "Main Check Project Updates"
on:
  push:
    branches:
      - main
    paths:
      - 'DemoBelcorp2/**'
      - 'infra-as-code/**'
  pull_request:
    branches:
      - main
    paths:
      - 'DemoBelcorp2/**'
      - 'infra-as-code/**'

jobs:

  check-project-updates:
    name: Check Project Updates
    runs-on: ubuntu-22.04
    outputs:
      infrastructure: ${{ steps.filter.outputs.infrastructure }}
      dbt-project: ${{ steps.filter.outputs.dbt-project }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Filter Paths
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            infrastructure:
              - 'infra-as-code/**'
            dbt-project:
              - 'DemoBelcorp2/**'

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    needs: check-project-updates
    if: needs.check-project-updates.outputs.infrastructure == 'true'
    env:
      ENV: dev
    outputs:
      plan-status: ${{ env.PLAN_STATUS }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN}}
          role-session-name: ${{ env.AWS_IAM_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        run: cd infra-as-code && terraform init --backend-config="bucket=belcorp-0002-demo-belde-s3-template-test-fpm"

      - name: Validate syntax Terraform
        id: validate
        run: |
          cd infra-as-code
          terraform validate -no-color
          terraform workspace select $ENV || terraform workspace new $ENV

      - name: Terraform Plan
        id: plan
        run: cd infra-as-code && terraform plan -out plan.tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: |
          echo "PLAN_STATUS=failure" >> "$GITHUB_ENV"
          exit 1

      - name: Set Terraform Plan Status
        run: echo "PLAN_STATUS=success" >> "$GITHUB_ENV"

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read
    needs:
      - terraform-plan
    if: needs.check-project-updates.outputs.infrastructure == 'true' && needs.terraform-plan.outputs.plan-status == 'success'
    env:
      PLAN_STATUS: ${{ needs.terraform-plan.outputs.plan-status }}
      ENV: dev
    steps:
      - name: Check Terraform Plan Status
        if: env.PLAN_STATUS != 'success'
        run: |
          echo "The given Terraform plan is not valid"
          exit 1

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN}}
          role-session-name: ${{ env.AWS_IAM_ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        run: cd infra-as-code && terraform init --backend-config="bucket=belcorp-0002-demo-belde-s3-template-test-fpm"

      - name: Terraform Apply
        run: |
          cd infra-as-code
          terraform workspace select $ENV
          terraform plan
          terraform apply -auto-approve -input=false
      #################################################
      # call workflow code analysis sonarqube
      #################################################
  trigger-workflows-analysis:
    name: Trigger Workflows Analysis
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    needs: check-project-updates
    steps:
      - name: trigger code analysis sonarqube event
        if: needs.check-project-updates.outputs.dbt-project == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          event-type: code-analysis-sonarqube-event
          client-payload: '{"check_update": "${{ needs.check-project-updates.outputs.dbt-project }}"}'